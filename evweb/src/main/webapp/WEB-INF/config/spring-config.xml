<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/css/**" location="/WEB-INF/static/common/css/" />
	<resources mapping="/js/**" location="/WEB-INF/static/common/js/" />
	<resources mapping="/vendor/**" location="/WEB-INF/static/common/vendor/" />
	<resources mapping="/upload/**" location="/WEB-INF/upload/" />
	<resources mapping="/weather/**" location="/WEB-INF/static/common/weather/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"></beans:property>
	</beans:bean>
	
	<!-- Tiles -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"></beans:property>
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- DataSource Was -->
	<beans:bean id="ds" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring"></beans:property>
		<beans:property name="resourceRef" value="true"></beans:property>
	</beans:bean>
	
	<!-- sql run -->
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="ds"></beans:constructor-arg>
	</beans:bean>
	
	<!-- spring connect mybatis -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds"></beans:property>
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"></beans:property>
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
	
	<!-- 파일 업로드 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="40000000"></beans:property>
	</beans:bean>
	
	<!-- mongodb설정하기 -->
	<mongo:mongo id="mongods" host="127.0.0.1" port="27017"/>
	<beans:bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg ref="mongods"/>
		<beans:constructor-arg name="databaseName" value="multi"/>
	</beans:bean>
	<!-- mongodb데이터가 저장될 Repository클래스가 있는 위치를 정의 -->
	<mongo:repositories base-package="com.project.faq" mongo-template-ref="mongoTemplate"/>
	
	<context:component-scan base-package="com.project.faq" />
	<context:component-scan base-package="main" />
		
	<!-- 빈 생성 패키지 -->
	<context:component-scan base-package="com.project.main" />
	<context:component-scan base-package="com.project" />
	<context:component-scan base-package="com" />
	<context:component-scan base-package="com.project.manager" />
	<context:component-scan base-package="com.project.login" />
	<context:component-scan base-package="main" />
	<context:component-scan base-package="mapper" />
	
	<!-- 인터셉터  -->
	<interceptors>                                                   
		<interceptor>                                                
			<mapping path="/admin/**"/>                              
			<mapping path="/service/**"/>                            
			<mapping path="/monitoring/**"/>                          
			<mapping path="/mypage/**"/>                            
			<mapping path="/manager/**"/>                            
			<mapping path="/weather/**"/>                            
			<exclude-mapping path="/login"/>                         
			<exclude-mapping path="/login.do"/>                      
			<exclude-mapping path="/images/**"/>
			<exclude-mapping path="/resources/**"/>
			<exclude-mapping path="/css/**"/>
			<exclude-mapping path="/js/**"/>
			<exclude-mapping path="/vendor/**"/>
			<exclude-mapping path="/upload/**"/>
			<beans:bean class = "com.project.common.LoginCheckInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	
	<!-- ========================스프링에서 트랜잭션을 관리하는 핵심클래스를 빈으로 등록============================= -->
	<!-- 1. transactionManager객체등록 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds"/>
	</beans:bean>
	<!-- 2. Advice등록 -->
	<!-- Exception이 발생하면 rollback처리를 하겠다는 의미 -->
	<tx:advice  id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method  name="insert" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- aop처리 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.project.service..*Service*.*(..))" id="txpointcut"/>
		<aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut"/>
	</aop:config>
	<!-- aop작업을 수행하는 proxy가 자동으로 감지해서 aop등록된 것을 확인하고 실행될 수 있도록 처리 -->
	<aop:aspectj-autoproxy/>
	
</beans:beans>
  